//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lobby.GameProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameState", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    [System.SerializableAttribute()]
    public partial class GameState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Lobby.GameProxy.GameCard[] CardsInHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentTeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GameEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Lobby.GameProxy.GameEndReason> GameEndReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOwnTeamTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOwnTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Lobby.GameProxy.TeamState[] OpponentsTeamStatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnPlayerOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnTeamIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Lobby.GameProxy.TeamState OwnTeamStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Lobby.GameProxy.GamePlayer[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WaitingForDecisionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Lobby.GameProxy.GameCard[] CardsInHand {
            get {
                return this.CardsInHandField;
            }
            set {
                if ((object.ReferenceEquals(this.CardsInHandField, value) != true)) {
                    this.CardsInHandField = value;
                    this.RaisePropertyChanged("CardsInHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentPlayer {
            get {
                return this.CurrentPlayerField;
            }
            set {
                if ((this.CurrentPlayerField.Equals(value) != true)) {
                    this.CurrentPlayerField = value;
                    this.RaisePropertyChanged("CurrentPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentTeam {
            get {
                return this.CurrentTeamField;
            }
            set {
                if ((this.CurrentTeamField.Equals(value) != true)) {
                    this.CurrentTeamField = value;
                    this.RaisePropertyChanged("CurrentTeam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GameEnd {
            get {
                return this.GameEndField;
            }
            set {
                if ((this.GameEndField.Equals(value) != true)) {
                    this.GameEndField = value;
                    this.RaisePropertyChanged("GameEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Lobby.GameProxy.GameEndReason> GameEndReason {
            get {
                return this.GameEndReasonField;
            }
            set {
                if ((this.GameEndReasonField.Equals(value) != true)) {
                    this.GameEndReasonField = value;
                    this.RaisePropertyChanged("GameEndReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOwnTeamTurn {
            get {
                return this.IsOwnTeamTurnField;
            }
            set {
                if ((this.IsOwnTeamTurnField.Equals(value) != true)) {
                    this.IsOwnTeamTurnField = value;
                    this.RaisePropertyChanged("IsOwnTeamTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOwnTurn {
            get {
                return this.IsOwnTurnField;
            }
            set {
                if ((this.IsOwnTurnField.Equals(value) != true)) {
                    this.IsOwnTurnField = value;
                    this.RaisePropertyChanged("IsOwnTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Lobby.GameProxy.TeamState[] OpponentsTeamStates {
            get {
                return this.OpponentsTeamStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.OpponentsTeamStatesField, value) != true)) {
                    this.OpponentsTeamStatesField = value;
                    this.RaisePropertyChanged("OpponentsTeamStates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnPlayerOrder {
            get {
                return this.OwnPlayerOrderField;
            }
            set {
                if ((this.OwnPlayerOrderField.Equals(value) != true)) {
                    this.OwnPlayerOrderField = value;
                    this.RaisePropertyChanged("OwnPlayerOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnTeamIndex {
            get {
                return this.OwnTeamIndexField;
            }
            set {
                if ((this.OwnTeamIndexField.Equals(value) != true)) {
                    this.OwnTeamIndexField = value;
                    this.RaisePropertyChanged("OwnTeamIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Lobby.GameProxy.TeamState OwnTeamState {
            get {
                return this.OwnTeamStateField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnTeamStateField, value) != true)) {
                    this.OwnTeamStateField = value;
                    this.RaisePropertyChanged("OwnTeamState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Lobby.GameProxy.GamePlayer[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WaitingForDecision {
            get {
                return this.WaitingForDecisionField;
            }
            set {
                if ((this.WaitingForDecisionField.Equals(value) != true)) {
                    this.WaitingForDecisionField = value;
                    this.RaisePropertyChanged("WaitingForDecision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamState", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    [System.SerializableAttribute()]
    public partial class TeamState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistanceTraveledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasAccidentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasFlatTireField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InvinciblePriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InvincibleToAccidentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InvincibleToFuelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InvincibleToTireField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBrokenDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOutOfFuelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnderSpeedLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Lobby.GameProxy.EffectCardType PlayedCardEffectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGo {
            get {
                return this.CanGoField;
            }
            set {
                if ((this.CanGoField.Equals(value) != true)) {
                    this.CanGoField = value;
                    this.RaisePropertyChanged("CanGo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistanceTraveled {
            get {
                return this.DistanceTraveledField;
            }
            set {
                if ((this.DistanceTraveledField.Equals(value) != true)) {
                    this.DistanceTraveledField = value;
                    this.RaisePropertyChanged("DistanceTraveled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAccident {
            get {
                return this.HasAccidentField;
            }
            set {
                if ((this.HasAccidentField.Equals(value) != true)) {
                    this.HasAccidentField = value;
                    this.RaisePropertyChanged("HasAccident");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasFlatTire {
            get {
                return this.HasFlatTireField;
            }
            set {
                if ((this.HasFlatTireField.Equals(value) != true)) {
                    this.HasFlatTireField = value;
                    this.RaisePropertyChanged("HasFlatTire");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InvinciblePriority {
            get {
                return this.InvinciblePriorityField;
            }
            set {
                if ((this.InvinciblePriorityField.Equals(value) != true)) {
                    this.InvinciblePriorityField = value;
                    this.RaisePropertyChanged("InvinciblePriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InvincibleToAccidents {
            get {
                return this.InvincibleToAccidentsField;
            }
            set {
                if ((this.InvincibleToAccidentsField.Equals(value) != true)) {
                    this.InvincibleToAccidentsField = value;
                    this.RaisePropertyChanged("InvincibleToAccidents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InvincibleToFuel {
            get {
                return this.InvincibleToFuelField;
            }
            set {
                if ((this.InvincibleToFuelField.Equals(value) != true)) {
                    this.InvincibleToFuelField = value;
                    this.RaisePropertyChanged("InvincibleToFuel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InvincibleToTire {
            get {
                return this.InvincibleToTireField;
            }
            set {
                if ((this.InvincibleToTireField.Equals(value) != true)) {
                    this.InvincibleToTireField = value;
                    this.RaisePropertyChanged("InvincibleToTire");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBrokenDown {
            get {
                return this.IsBrokenDownField;
            }
            set {
                if ((this.IsBrokenDownField.Equals(value) != true)) {
                    this.IsBrokenDownField = value;
                    this.RaisePropertyChanged("IsBrokenDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOutOfFuel {
            get {
                return this.IsOutOfFuelField;
            }
            set {
                if ((this.IsOutOfFuelField.Equals(value) != true)) {
                    this.IsOutOfFuelField = value;
                    this.RaisePropertyChanged("IsOutOfFuel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnderSpeedLimit {
            get {
                return this.IsUnderSpeedLimitField;
            }
            set {
                if ((this.IsUnderSpeedLimitField.Equals(value) != true)) {
                    this.IsUnderSpeedLimitField = value;
                    this.RaisePropertyChanged("IsUnderSpeedLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Lobby.GameProxy.EffectCardType PlayedCardEffects {
            get {
                return this.PlayedCardEffectsField;
            }
            set {
                if ((this.PlayedCardEffectsField.Equals(value) != true)) {
                    this.PlayedCardEffectsField = value;
                    this.RaisePropertyChanged("PlayedCardEffects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamIndex {
            get {
                return this.TeamIndexField;
            }
            set {
                if ((this.TeamIndexField.Equals(value) != true)) {
                    this.TeamIndexField = value;
                    this.RaisePropertyChanged("TeamIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameCard", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    [System.SerializableAttribute()]
    public partial class GameCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEndReason", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    public enum GameEndReason : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WON_THOUSAND_MILES = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXHAUSTED_DECK = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PLAYER_DISCONNECTION = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamePlayer", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    [System.SerializableAttribute()]
    public partial class GamePlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamIndex {
            get {
                return this.TeamIndexField;
            }
            set {
                if ((this.TeamIndexField.Equals(value) != true)) {
                    this.TeamIndexField = value;
                    this.RaisePropertyChanged("TeamIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="EffectCardType", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    public enum EffectCardType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACCIDENT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FUEL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TIRE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SPEED_LIMIT = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRAFFIC_LIGHT = 16,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayCardResult", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    public enum PlayCardResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CANNOT_PLAY = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONG_TOKEN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONG_TOKEN_PLAYER = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ALREADY_PLAYED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONG_TURN = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_ALL_PLAYERS_PRESENT = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WAITING_FOR_DECISION = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMessage", Namespace="http://schemas.datacontract.org/2004/07/LibrairieService.Models")]
    [System.SerializableAttribute()]
    public partial class UserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameProxy.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateGame", ReplyAction="http://tempuri.org/IGameService/CreateGameResponse")]
        System.Guid CreateGame(System.Guid player, System.Guid room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateGame", ReplyAction="http://tempuri.org/IGameService/CreateGameResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateGameAsync(System.Guid player, System.Guid room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        System.Guid JoinGame(System.Guid player, System.Guid room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        System.Threading.Tasks.Task<System.Guid> JoinGameAsync(System.Guid player, System.Guid room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/DoHeartbeat", ReplyAction="http://tempuri.org/IGameService/DoHeartbeatResponse")]
        bool DoHeartbeat(System.Guid playerToken, System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/DoHeartbeat", ReplyAction="http://tempuri.org/IGameService/DoHeartbeatResponse")]
        System.Threading.Tasks.Task<bool> DoHeartbeatAsync(System.Guid playerToken, System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetState", ReplyAction="http://tempuri.org/IGameService/GetStateResponse")]
        Lobby.GameProxy.GameState GetState(System.Guid playerToken, System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetState", ReplyAction="http://tempuri.org/IGameService/GetStateResponse")]
        System.Threading.Tasks.Task<Lobby.GameProxy.GameState> GetStateAsync(System.Guid playerToken, System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/PlayCard", ReplyAction="http://tempuri.org/IGameService/PlayCardResponse")]
        Lobby.GameProxy.PlayCardResult PlayCard(System.Guid gameToken, System.Guid playerToken, System.Guid cardToken, int targetTeamIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/PlayCard", ReplyAction="http://tempuri.org/IGameService/PlayCardResponse")]
        System.Threading.Tasks.Task<Lobby.GameProxy.PlayCardResult> PlayCardAsync(System.Guid gameToken, System.Guid playerToken, System.Guid cardToken, int targetTeamIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/SendGameMessage", ReplyAction="http://tempuri.org/IGameService/SendGameMessageResponse")]
        bool SendGameMessage(System.Guid playerToken, System.Guid gameToken, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/SendGameMessage", ReplyAction="http://tempuri.org/IGameService/SendGameMessageResponse")]
        System.Threading.Tasks.Task<bool> SendGameMessageAsync(System.Guid playerToken, System.Guid gameToken, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAllGameMessages", ReplyAction="http://tempuri.org/IGameService/GetAllGameMessagesResponse")]
        Lobby.GameProxy.UserMessage[] GetAllGameMessages(System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAllGameMessages", ReplyAction="http://tempuri.org/IGameService/GetAllGameMessagesResponse")]
        System.Threading.Tasks.Task<Lobby.GameProxy.UserMessage[]> GetAllGameMessagesAsync(System.Guid gameToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetGameMessagesSinceDate", ReplyAction="http://tempuri.org/IGameService/GetGameMessagesSinceDateResponse")]
        Lobby.GameProxy.UserMessage[] GetGameMessagesSinceDate(System.Guid gameToken, System.DateTime sinceDateUtc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetGameMessagesSinceDate", ReplyAction="http://tempuri.org/IGameService/GetGameMessagesSinceDateResponse")]
        System.Threading.Tasks.Task<Lobby.GameProxy.UserMessage[]> GetGameMessagesSinceDateAsync(System.Guid gameToken, System.DateTime sinceDateUtc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/TakePlayerDisconnectionDecision", ReplyAction="http://tempuri.org/IGameService/TakePlayerDisconnectionDecisionResponse")]
        void TakePlayerDisconnectionDecision(System.Guid playerToken, System.Guid gameToken, bool continueGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/TakePlayerDisconnectionDecision", ReplyAction="http://tempuri.org/IGameService/TakePlayerDisconnectionDecisionResponse")]
        System.Threading.Tasks.Task TakePlayerDisconnectionDecisionAsync(System.Guid playerToken, System.Guid gameToken, bool continueGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetReturnToken", ReplyAction="http://tempuri.org/IGameService/GetReturnTokenResponse")]
        System.Guid GetReturnToken(System.Guid room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetReturnToken", ReplyAction="http://tempuri.org/IGameService/GetReturnTokenResponse")]
        System.Threading.Tasks.Task<System.Guid> GetReturnTokenAsync(System.Guid room);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : Lobby.GameProxy.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<Lobby.GameProxy.IGameService>, Lobby.GameProxy.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid CreateGame(System.Guid player, System.Guid room) {
            return base.Channel.CreateGame(player, room);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateGameAsync(System.Guid player, System.Guid room) {
            return base.Channel.CreateGameAsync(player, room);
        }
        
        public System.Guid JoinGame(System.Guid player, System.Guid room) {
            return base.Channel.JoinGame(player, room);
        }
        
        public System.Threading.Tasks.Task<System.Guid> JoinGameAsync(System.Guid player, System.Guid room) {
            return base.Channel.JoinGameAsync(player, room);
        }
        
        public bool DoHeartbeat(System.Guid playerToken, System.Guid gameToken) {
            return base.Channel.DoHeartbeat(playerToken, gameToken);
        }
        
        public System.Threading.Tasks.Task<bool> DoHeartbeatAsync(System.Guid playerToken, System.Guid gameToken) {
            return base.Channel.DoHeartbeatAsync(playerToken, gameToken);
        }
        
        public Lobby.GameProxy.GameState GetState(System.Guid playerToken, System.Guid gameToken) {
            return base.Channel.GetState(playerToken, gameToken);
        }
        
        public System.Threading.Tasks.Task<Lobby.GameProxy.GameState> GetStateAsync(System.Guid playerToken, System.Guid gameToken) {
            return base.Channel.GetStateAsync(playerToken, gameToken);
        }
        
        public Lobby.GameProxy.PlayCardResult PlayCard(System.Guid gameToken, System.Guid playerToken, System.Guid cardToken, int targetTeamIndex) {
            return base.Channel.PlayCard(gameToken, playerToken, cardToken, targetTeamIndex);
        }
        
        public System.Threading.Tasks.Task<Lobby.GameProxy.PlayCardResult> PlayCardAsync(System.Guid gameToken, System.Guid playerToken, System.Guid cardToken, int targetTeamIndex) {
            return base.Channel.PlayCardAsync(gameToken, playerToken, cardToken, targetTeamIndex);
        }
        
        public bool SendGameMessage(System.Guid playerToken, System.Guid gameToken, string message) {
            return base.Channel.SendGameMessage(playerToken, gameToken, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendGameMessageAsync(System.Guid playerToken, System.Guid gameToken, string message) {
            return base.Channel.SendGameMessageAsync(playerToken, gameToken, message);
        }
        
        public Lobby.GameProxy.UserMessage[] GetAllGameMessages(System.Guid gameToken) {
            return base.Channel.GetAllGameMessages(gameToken);
        }
        
        public System.Threading.Tasks.Task<Lobby.GameProxy.UserMessage[]> GetAllGameMessagesAsync(System.Guid gameToken) {
            return base.Channel.GetAllGameMessagesAsync(gameToken);
        }
        
        public Lobby.GameProxy.UserMessage[] GetGameMessagesSinceDate(System.Guid gameToken, System.DateTime sinceDateUtc) {
            return base.Channel.GetGameMessagesSinceDate(gameToken, sinceDateUtc);
        }
        
        public System.Threading.Tasks.Task<Lobby.GameProxy.UserMessage[]> GetGameMessagesSinceDateAsync(System.Guid gameToken, System.DateTime sinceDateUtc) {
            return base.Channel.GetGameMessagesSinceDateAsync(gameToken, sinceDateUtc);
        }
        
        public void TakePlayerDisconnectionDecision(System.Guid playerToken, System.Guid gameToken, bool continueGame) {
            base.Channel.TakePlayerDisconnectionDecision(playerToken, gameToken, continueGame);
        }
        
        public System.Threading.Tasks.Task TakePlayerDisconnectionDecisionAsync(System.Guid playerToken, System.Guid gameToken, bool continueGame) {
            return base.Channel.TakePlayerDisconnectionDecisionAsync(playerToken, gameToken, continueGame);
        }
        
        public System.Guid GetReturnToken(System.Guid room) {
            return base.Channel.GetReturnToken(room);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetReturnTokenAsync(System.Guid room) {
            return base.Channel.GetReturnTokenAsync(room);
        }
    }
}
